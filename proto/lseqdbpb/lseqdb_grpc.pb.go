// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/lseqdb.proto

package lseqdbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LSeqDatabaseClient is the client API for LSeqDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LSeqDatabaseClient interface {
	//  Database API
	GetValue(ctx context.Context, in *ReplicaKey, opts ...grpc.CallOption) (*Value, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*LSeq, error)
	//  Supports search only within one replica
	SeekGet(ctx context.Context, in *SeekGetRequest, opts ...grpc.CallOption) (*DBItems, error)
	GetReplicaEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*DBItems, error)
	//  System calls for synchronization
	SyncGet_(ctx context.Context, in *SyncGetRequest, opts ...grpc.CallOption) (*LSeq, error)
	SyncPut_(ctx context.Context, in *DBItems, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type lSeqDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewLSeqDatabaseClient(cc grpc.ClientConnInterface) LSeqDatabaseClient {
	return &lSeqDatabaseClient{cc}
}

func (c *lSeqDatabaseClient) GetValue(ctx context.Context, in *ReplicaKey, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/lseqdb.LSeqDatabase/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSeqDatabaseClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*LSeq, error) {
	out := new(LSeq)
	err := c.cc.Invoke(ctx, "/lseqdb.LSeqDatabase/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSeqDatabaseClient) SeekGet(ctx context.Context, in *SeekGetRequest, opts ...grpc.CallOption) (*DBItems, error) {
	out := new(DBItems)
	err := c.cc.Invoke(ctx, "/lseqdb.LSeqDatabase/SeekGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSeqDatabaseClient) GetReplicaEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*DBItems, error) {
	out := new(DBItems)
	err := c.cc.Invoke(ctx, "/lseqdb.LSeqDatabase/GetReplicaEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSeqDatabaseClient) SyncGet_(ctx context.Context, in *SyncGetRequest, opts ...grpc.CallOption) (*LSeq, error) {
	out := new(LSeq)
	err := c.cc.Invoke(ctx, "/lseqdb.LSeqDatabase/SyncGet_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSeqDatabaseClient) SyncPut_(ctx context.Context, in *DBItems, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/lseqdb.LSeqDatabase/SyncPut_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LSeqDatabaseServer is the server API for LSeqDatabase service.
// All implementations must embed UnimplementedLSeqDatabaseServer
// for forward compatibility
type LSeqDatabaseServer interface {
	//  Database API
	GetValue(context.Context, *ReplicaKey) (*Value, error)
	Put(context.Context, *PutRequest) (*LSeq, error)
	//  Supports search only within one replica
	SeekGet(context.Context, *SeekGetRequest) (*DBItems, error)
	GetReplicaEvents(context.Context, *EventsRequest) (*DBItems, error)
	//  System calls for synchronization
	SyncGet_(context.Context, *SyncGetRequest) (*LSeq, error)
	SyncPut_(context.Context, *DBItems) (*emptypb.Empty, error)
	mustEmbedUnimplementedLSeqDatabaseServer()
}

// UnimplementedLSeqDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedLSeqDatabaseServer struct {
}

func (UnimplementedLSeqDatabaseServer) GetValue(context.Context, *ReplicaKey) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedLSeqDatabaseServer) Put(context.Context, *PutRequest) (*LSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedLSeqDatabaseServer) SeekGet(context.Context, *SeekGetRequest) (*DBItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeekGet not implemented")
}
func (UnimplementedLSeqDatabaseServer) GetReplicaEvents(context.Context, *EventsRequest) (*DBItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicaEvents not implemented")
}
func (UnimplementedLSeqDatabaseServer) SyncGet_(context.Context, *SyncGetRequest) (*LSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGet_ not implemented")
}
func (UnimplementedLSeqDatabaseServer) SyncPut_(context.Context, *DBItems) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPut_ not implemented")
}
func (UnimplementedLSeqDatabaseServer) mustEmbedUnimplementedLSeqDatabaseServer() {}

// UnsafeLSeqDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LSeqDatabaseServer will
// result in compilation errors.
type UnsafeLSeqDatabaseServer interface {
	mustEmbedUnimplementedLSeqDatabaseServer()
}

func RegisterLSeqDatabaseServer(s grpc.ServiceRegistrar, srv LSeqDatabaseServer) {
	s.RegisterService(&LSeqDatabase_ServiceDesc, srv)
}

func _LSeqDatabase_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSeqDatabaseServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lseqdb.LSeqDatabase/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSeqDatabaseServer).GetValue(ctx, req.(*ReplicaKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSeqDatabase_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSeqDatabaseServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lseqdb.LSeqDatabase/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSeqDatabaseServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSeqDatabase_SeekGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeekGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSeqDatabaseServer).SeekGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lseqdb.LSeqDatabase/SeekGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSeqDatabaseServer).SeekGet(ctx, req.(*SeekGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSeqDatabase_GetReplicaEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSeqDatabaseServer).GetReplicaEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lseqdb.LSeqDatabase/GetReplicaEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSeqDatabaseServer).GetReplicaEvents(ctx, req.(*EventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSeqDatabase_SyncGet__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSeqDatabaseServer).SyncGet_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lseqdb.LSeqDatabase/SyncGet_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSeqDatabaseServer).SyncGet_(ctx, req.(*SyncGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSeqDatabase_SyncPut__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSeqDatabaseServer).SyncPut_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lseqdb.LSeqDatabase/SyncPut_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSeqDatabaseServer).SyncPut_(ctx, req.(*DBItems))
	}
	return interceptor(ctx, in, info, handler)
}

// LSeqDatabase_ServiceDesc is the grpc.ServiceDesc for LSeqDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LSeqDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lseqdb.LSeqDatabase",
	HandlerType: (*LSeqDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _LSeqDatabase_GetValue_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _LSeqDatabase_Put_Handler,
		},
		{
			MethodName: "SeekGet",
			Handler:    _LSeqDatabase_SeekGet_Handler,
		},
		{
			MethodName: "GetReplicaEvents",
			Handler:    _LSeqDatabase_GetReplicaEvents_Handler,
		},
		{
			MethodName: "SyncGet_",
			Handler:    _LSeqDatabase_SyncGet__Handler,
		},
		{
			MethodName: "SyncPut_",
			Handler:    _LSeqDatabase_SyncPut__Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lseqdb.proto",
}
